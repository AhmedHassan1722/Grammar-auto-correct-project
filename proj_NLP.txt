import re
import nltk
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
from nltk.stem import SnowballStemmer
from nltk.corpus import gutenberg
from nltk.stem import WordNetLemmatizer
lemmatizer = WordNetLemmatizer()

#files = gutenberg.fileids()
#print(files)

text='my name was abdullah , I can , paly fotbal , i19years ,i studyis math in unviersy ones of weeks'
#text= gutenberg.raw(files[0])
snowball = SnowballStemmer(language='english')

def preprocess_text(text):
    # تحويل النص إلى حروف صغيرة
    text = text.lower()
    
    # Remove extra whitespaces
    text = re.sub(r'\s+', ' ', text).strip()
    
    # إزالة الأرقام
    text = re.sub(r'\d+', '', text)
    
    # إزالة علامات الترقيم
    text = re.sub(r'[^\w\s]', '', text)
    
    # تقسيم النص إلى جمل وكلمات
    sentences = nltk.sent_tokenize(text)
    words = []
    for sentence in sentences:
        words.extend(nltk.word_tokenize(sentence))
    
    # إزالة الـ stop words
    stop_words = set(stopwords.words('english'))
    filtered_words = [word for word in words if not word.lower() in stop_words]
    
    #stemming
    
    #for word in words:
     #   print(word,"--->",snowball.stem(word))
    
    
    #Lemmatization
    for word in words :
        print(lemmatizer.lemmatize(word,'v'))


    print(' '.join(filtered_words))    
   
    # إعادة النص المنظف
    return filtered_words

print(preprocess_text(text))





from autocorrect import Speller

# Define the function to correct the grammar
def correct_grammar(text):
    # Create an instance of the Speller object from the autocorrect library
    spell = Speller()
    # Split the input text into individual words
    words = text.split()
    # Use the Speller's built-in correction method to correct each word
    corrected_words = [spell(word) for word in words]
    # Join the corrected words back into a single string
    corrected_text = " ".join(corrected_words)
    return corrected_text

# Test the function with some sample text
#text = "He goed to the park yesterday."
print(correct_grammar(text)) # Output: "He good to the park yesterday."






from textblob import TextBlob

# Define the function to correct the grammar
def correct_grammar(text):
    # Create a TextBlob object for the input text
    blob = TextBlob(text)
    # Use the correct() method to correct the grammar
    corrected_text = str(blob.correct())
    # Return the corrected text
    return corrected_text

# Test the function with some sample text
#text = "He goed to the park yesterday."
print(correct_grammar(text)) # Output: "He went to the park yesterday."






import language_tool_python

# Load the language tool
tool = language_tool_python.LanguageTool('en-US')

# Define the function to correct the grammar
def correct_grammar(text):
    # Use the language tool to check for grammar errors
    matches = tool.check(text)

    # Replace errors with suggested corrections
    for match in reversed(matches):
        suggestions = match.replacements
        if suggestions:
            start = match.offset
            end = match.offset + match.errorLength
            text = text[:start] + suggestions[0] + text[end:]

    return text

# Test the function with some sample text
#text = "I goed to the store. I is very happy."
corrected_text = correct_grammar(text)
print(corrected_text)
